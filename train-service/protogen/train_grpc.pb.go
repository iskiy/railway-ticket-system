// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: train.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SeatReservationClient is the client API for SeatReservation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeatReservationClient interface {
	CheckSeatAvailabilityAndReserve(ctx context.Context, in *CheckSeatAvailabilityAndReserveRequest, opts ...grpc.CallOption) (*CheckSeatAvailabilityAndReserveResponse, error)
}

type seatReservationClient struct {
	cc grpc.ClientConnInterface
}

func NewSeatReservationClient(cc grpc.ClientConnInterface) SeatReservationClient {
	return &seatReservationClient{cc}
}

func (c *seatReservationClient) CheckSeatAvailabilityAndReserve(ctx context.Context, in *CheckSeatAvailabilityAndReserveRequest, opts ...grpc.CallOption) (*CheckSeatAvailabilityAndReserveResponse, error) {
	out := new(CheckSeatAvailabilityAndReserveResponse)
	err := c.cc.Invoke(ctx, "/train.SeatReservation/CheckSeatAvailabilityAndReserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeatReservationServer is the server API for SeatReservation service.
// All implementations must embed UnimplementedSeatReservationServer
// for forward compatibility
type SeatReservationServer interface {
	CheckSeatAvailabilityAndReserve(context.Context, *CheckSeatAvailabilityAndReserveRequest) (*CheckSeatAvailabilityAndReserveResponse, error)
	mustEmbedUnimplementedSeatReservationServer()
}

// UnimplementedSeatReservationServer must be embedded to have forward compatible implementations.
type UnimplementedSeatReservationServer struct {
}

func (UnimplementedSeatReservationServer) CheckSeatAvailabilityAndReserve(context.Context, *CheckSeatAvailabilityAndReserveRequest) (*CheckSeatAvailabilityAndReserveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSeatAvailabilityAndReserve not implemented")
}
func (UnimplementedSeatReservationServer) mustEmbedUnimplementedSeatReservationServer() {}

// UnsafeSeatReservationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeatReservationServer will
// result in compilation errors.
type UnsafeSeatReservationServer interface {
	mustEmbedUnimplementedSeatReservationServer()
}

func RegisterSeatReservationServer(s grpc.ServiceRegistrar, srv SeatReservationServer) {
	s.RegisterService(&SeatReservation_ServiceDesc, srv)
}

func _SeatReservation_CheckSeatAvailabilityAndReserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSeatAvailabilityAndReserveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatReservationServer).CheckSeatAvailabilityAndReserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/train.SeatReservation/CheckSeatAvailabilityAndReserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatReservationServer).CheckSeatAvailabilityAndReserve(ctx, req.(*CheckSeatAvailabilityAndReserveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SeatReservation_ServiceDesc is the grpc.ServiceDesc for SeatReservation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeatReservation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "train.SeatReservation",
	HandlerType: (*SeatReservationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckSeatAvailabilityAndReserve",
			Handler:    _SeatReservation_CheckSeatAvailabilityAndReserve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "train.proto",
}
