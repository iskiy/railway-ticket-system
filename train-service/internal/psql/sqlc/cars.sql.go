// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: cars.sql

package sqlc

import (
	"context"
)

const createCar = `-- name: CreateCar :one
INSERT INTO cars (car_type, train_id)
VALUES ($1, $2)
RETURNING car_id
`

type CreateCarParams struct {
	CarType string `json:"car_type"`
	TrainID int64  `json:"train_id"`
}

func (q *Queries) CreateCar(ctx context.Context, arg CreateCarParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createCar, arg.CarType, arg.TrainID)
	var car_id int64
	err := row.Scan(&car_id)
	return car_id, err
}

const deleteCar = `-- name: DeleteCar :exec
DELETE FROM cars
WHERE car_id = $1
`

func (q *Queries) DeleteCar(ctx context.Context, carID int64) error {
	_, err := q.db.ExecContext(ctx, deleteCar, carID)
	return err
}

const getCar = `-- name: GetCar :one
SELECT car_id, car_type, train_id
FROM cars
WHERE car_id = $1
LIMIT 1
`

func (q *Queries) GetCar(ctx context.Context, carID int64) (Car, error) {
	row := q.db.QueryRowContext(ctx, getCar, carID)
	var i Car
	err := row.Scan(&i.CarID, &i.CarType, &i.TrainID)
	return i, err
}

const getTrainCars = `-- name: GetTrainCars :many
SELECT car_id, car_type, train_id
FROM cars
WHERE train_id = $1
`

func (q *Queries) GetTrainCars(ctx context.Context, trainID int64) ([]Car, error) {
	rows, err := q.db.QueryContext(ctx, getTrainCars, trainID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Car{}
	for rows.Next() {
		var i Car
		if err := rows.Scan(&i.CarID, &i.CarType, &i.TrainID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
